# -*- coding: UTF-8 -*-
import os
from sys import argv
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-i", help="-i --table  Input profile table, separate with \\t,required",required=True)
#parser.add_argument("-p", help="-p --group  Input mappingfile, separate with \\t,required",required=True)
parser.add_argument("-p", help="-p --clinical or demographical information   Input clinical info tab, separate with \\t,required",required=True)
parser.add_argument("-o", help="-o --result  Input prefix of outfile", default="profile_test")
parser.add_argument("-m", help="-o --indice")

args = parser.parse_args()

if os.path.exists(args.o) is False:
  os.makedirs(args.o)

def getRscript(profile, clin, output,method):
    script = """    
distdir = "%s"
groupdir = "%s"
prefix = "%s"
method = "%s"
output1 <- paste(method,"adonis_res.txt",sep='.')
output1 <- paste(prefix,output1,sep='/')
output2 <- paste(method,"mrpp_res.txt",sep='.')
output2 <- paste(prefix,output2,sep='/')
output3 <- paste(method,"anosim_res.txt",sep='.')
output3 <- paste(prefix,output3,sep='/')


dist <- read.table(distdir,header=T,sep='	', row.names=1,check.names=F)
group <- read.table(groupdir,header = T,sep='	',row.names = 1,check.names=F)


if (dim(group)[2]==1){

  group$id <- row.names(group)
  col_tar <- names(group)[1]
  group <- group[match(rownames(dist), rownames(group)),]
  group<-group[complete.cases(group),]
  rn <- group$id
  group <- group[ ,!names(group) %%in%% c("id")]
  group <- as.data.frame(group)
  row.names(group) <- rn
  
}else{
  group <- group[match(rownames(dist), rownames(group)),]
}

if(dim(dist)[1] > dim(group)[1]){
  dist <- dist[which(row.names(dist) %%in%% row.names(group)==T),which(names(dist) %%in%% row.names(group)==T)]
} else if (dim(dist)[1] < dim(group)[1]){
  group <- group[which(row.names(group) %%in%% names(dist)==T),]
}

library(vegan)


cont_clean <- function(x,nancutoff){
  a <- rownames(x)
  x <- lapply(x, as.numeric) 
  x <- as.data.frame(x)
  row.names(x) <- a
  #drop those with missing value over cutoff
  if (!is.null(nancutoff)) {
    x <- x[,!apply(x,2,function(y){sum(is.na(y))/nrow(x)>nancutoff})]
    for(i in 1:ncol(x)){
      x[,i][which(is.na(x[,i]))] = mean(x[,i],na.rm = T)
    }
    return(x)
  }
  x<-x[with(x, as.logical(ave(Group, FUN = function(x) length(unique(x)) >=1))),]
}
ordered_adonis_each <-function(x,dist){
  
  data1 <- matrix(rep(0,ncol(x)*3),ncol = 3)
  data1[,1] <- colnames(x)
  
  colnames(data1) <- c("name","R2","P")
  if (length(ncol(x))>1){
    for(i in 1:ncol(x)){
        a <- adonis(dist~x[,i], permutations = 999) 
        data1[i,2] <- a$aov.tab$R2[1]
        data1[i,3] <- a$aov.tab$`Pr(>F)`[1]}
  }else{
    a <- adonis(dist~x$group,permutations=999)
    data1[1,2] <- a$aov.tab$R2[1]
    data1[1,3] <- a$aov.tab$`Pr(>F)`[1]
  }
  
  return(data1) 
}
ordered_mrpp_each <- function(x,dist){
  
  data1 <- matrix(rep(0,ncol(x)*3),ncol = 3)
  print(dim(data1))
  data1[,1] <- colnames(x)

  colnames(data1) <- c("name","delta","Sig. of delta")
  if (length(ncol(x))>1){
    for(i in 1:ncol(x)){
        a <- mrpp(dist, x[,i], permutations = 999) 
        data1[i,2] <- a$delta
        data1[i,3] <- a$Pvalue
      }
  }else{
    a <- mrpp(dist,x$group,permutations=999)
    data1[1,2] <- a$delta
    data1[1,3] <- a$Pvalue
  }
 
  return(data1)  
}
ordered_anosim <- function(x,dist){
  data1 <- matrix(rep(0,ncol(x)*3),ncol = 3)
  data1[,1] <- colnames(x)

  colnames(data1) <- c("name","R","P")
  if (length(ncol(x))>1){
    for(i in 1:ncol(x)){
      a <- anosim(dist,x[,i], permutations = 999) 
      data1[i,2] <- a$statistic
      data1[i,3] <- a$signif
    }
  }else{
    a <- anosim(dist,x$group,permutations=999)
    data1[1,2] <- a$statistic
    data1[1,3] <- a$signif
  }
  return(data1) 
}


#group <- cont_clean(group,0.3)
k <- ordered_adonis_each(group,dist)
m <- ordered_mrpp_each(group,dist)
a <- ordered_anosim(group,dist)



write.table(k,file = output1,quote=F,row.names=F,sep='\t')
write.table(m,file = output2,quote=F,row.names=F,sep='\t')
write.table(a,file = output3,quote=F,row.names=F,sep='\t')


""" % (profile, clin, output,method)
    return script


Rscript = getRscript(args.i, args.p, args.o,args.m)
with open(args.o + "/dist_manova.R", "w") as f:
    f.write(Rscript)
os.system("Rscript " + args.o + "/dist_manova.R")

'''
k <- k[order(k[,3]),]
m <- m[order(m[,3]),]
a <- a[order(a[,3]),]
'''
